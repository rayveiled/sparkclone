{"version":3,"sources":["index.scss","App.scss","_colors.scss","Settings.scss","ExperienceCalculator.scss","../../node_modules/bootstrap/scss/mixins/_breakpoints.scss"],"names":[],"mappings":"AAIA,KACE,iEACD,CAAA,yBAIG,KAAA,YACD,CAGC,KAAA,WACA,CAAA,eACA,CAAA,qBAIJ,CAAA,CAAA,UACE,YACD,CAAA,SAGC,kBACD,CAAA,UAGC,gBACA,CAAA,eAAgB,CC5BlB,WACE,cAAe,CACf,eAAgB,CAChB,wBAAyB,CACzB,iBAAkB,CACnB,UAGC,yBAA0B,CAC1B,wBCXmB,CDSrB,oBAKI,WAAY,CACZ,QAAS,CACV,oBAID,iBAAkB,CAClB,UAAW,CACX,2BAAA,CAAA,mBAAoB,CAHtB,0BAMI,WAAY,CACZ,qBAAuB,CAP3B,0BAWI,UAAW,CACX,MAAO,CACP,UAAW,CACX,UAAW,CACX,WAAY,CACZ,iBAAkB,CAClB,kBCnCiB,CDoCjB,2BAAsB,CAAtB,mBAAsB,CACtB,gCAAA,CAAA,wBAAyB,CAnB7B,iEAwBI,0BAAA,CAAA,kBAAsB,CEzC1B,cACE,YAAa,CACd,QAGC,UAAW,CACX,WAAY,CACZ,iBAAkB,CAClB,oBAAqB,CACrB,eAAgB,CACjB,gBAGC,OAAQ,CACR,eAAgB,CAChB,iBAAkB,CACnB,QAGC,KAAM,CACN,MAAO,CACP,OAAQ,CACR,QAAS,CACT,cAAe,CAEf,kBAAmB,CACnB,qBAKe,CAChB,uBARC,iBAAkB,CAGlB,sBAAuB,CAIvB,cDjCmB,CCkCpB,eAGC,UAAW,CACX,QAAS,CACT,UAAW,CACX,UAAW,CACX,WAAY,CAEZ,iBAAkB,CAElB,wBD7CmB,CC8CpB,6BAGC,oBAAqB,CACtB,oBAGC,0BAA2B,CAC5B,6BAGC,kCAAmC,CAInC,0BAA2B,CCxD7B,cACE,YAAa,CAKd,kDAND,cAII,eAAgB,CAEnB,CC8DG,4BD3DF,aACE,eAAgB,CACjB,CAGH,WACE,sCAAA,CAAA,8BAA+B,CADjC,mBAII,wBAA2B,CAA3B,yBAA2B,CAC3B,SAAU,CAKX,4BAVH,mBAQM,sBAAwB,CAE3B,CAGH,mBACE,eAAgB,CACjB,kBAGC,YAAa,CACb,cAAe,CACf,oBAAqB,CACrB,iBAAkB,CAoEnB,4BAxED,kBAOI,UAAW,CAiEd,CAxED,mCAWI,iBAAkB,CAClB,WAAY,CACZ,WAAY,CACZ,iBAAkB,CAyDnB,yBAvEH,8CAkBQ,QAAS,CACV,CCkBH,4BDrCJ,mCAuBM,kBAAmB,CACnB,UAAW,CA+Cd,CAvEH,iDA4BM,SAAU,CACV,iBAAkB,CAClB,KAAM,CACN,MAAO,CACP,UAAW,CACX,WAAY,CACZ,QAAS,CACT,cAAe,CAnCrB,+CAuCM,YAAa,CACb,kBAAmB,CACnB,kBAAmB,CACnB,sBAAuB,CACvB,UAAW,CACX,WAAY,CACZ,YAAa,CACb,wBFlFe,CEmFf,iBAAkB,CA/CxB,qDAmDM,QAAS,CACT,aFxFe,CEyFf,eAAgB,CAChB,gBAAkB,CAClB,iBAAkB,CAClB,kBAAmB,CACnB,wBAAyB,CAzD/B,qEA6DM,UAAY,CACZ,wBFlGe,CEmGf,wBFnGe,CEoCrB,uFAmEQ,UAAY,CACZ,wBFxGa,CEyGd,gBAML,oBAAqB,CACrB,UAAW,CACX,cAAe,CACf,iBAAkB,CAJpB,0BAOI,oBAAqB,CACrB,iBAAkB,CAClB,4BAA6B,CAC7B,UAAW,CACX,WAAY,CACZ,+BAAwB,CAAxB,uBAAwB,CACxB,wBF3HiB,CE4HjB,iBAAkB,CAClB,mBAAoB,CACpB,iBAAkB,CAClB,wCAAA,CAAA,gCAAkC,CAjBtC,iCA0BM,+BAAwB,CAAxB,uBAAwB,CACxB,QAAS,CACT,QAAS,CACT,uCAAgC,CAAhC,+BAAgC,CAChC,4BAAA,CAAA,oBAAqB,CA9B3B,iEAoBM,UAAW,CACX,OAAQ,CACR,UAAW,CACX,iBAAkB,CAClB,kBFtIe,CEuIf,iBAmBqB,CA5C3B,gCAwCM,gCAAyB,CAAzB,wBAAyB,CACzB,QAAS,CACT,QAAS,CACT,kCAA2B,CAA3B,0BAA2B,CAC3B,4BAAA,CAAA,oBAAqB,CACtB,+BAKH,YAAa,CADf,iEAMQ,wBFrKa,CE+JrB,uEASU,UAAW,CACX,eAAgB,CAChB,uCAAA,CAAA,+BAAkC,CAX5C,wEAeU,SAAU,CACV,eAAgB,CAChB,kCAAA,CAAA,0BAA4B","file":"main.f7d561df.chunk.css","sourcesContent":["@import \"~bootstrap/scss/functions\";\r\n@import \"~bootstrap/scss/variables\";\r\n@import \"~bootstrap/scss/mixins/breakpoints\";\r\n\r\nbody {\r\n  background: url(\"./assets/bg.jpg\") no-repeat center fixed;\r\n}\r\n\r\n@include media-breakpoint-up(sm) {\r\n  html {\r\n    height: 100vh;\r\n  }\r\n\r\n  body {\r\n    height: 100%;\r\n    overflow: hidden;\r\n    background-size: cover;\r\n  }\r\n}\r\n\r\n.tab-pane {\r\n  padding: 15px;\r\n}\r\n\r\n.no-wrap {\r\n  white-space: nowrap;\r\n}\r\n\r\n.input-sm {\r\n  padding: 5px 10px;\r\n  max-width: 120px;\r\n}\r\n","@import \"colors\";\r\n\r\n.container {\r\n  padding-left: 0;\r\n  padding-right: 0;\r\n  background-color: #E0E0E0;\r\n  border-radius: 4px;\r\n}\r\n\r\n.nav-tabs {\r\n  border-radius: 4px 4px 0 0;\r\n  background-color: $accent-blue;\r\n\r\n  & .nav-item {\r\n    border: none;\r\n    margin: 0;\r\n  }\r\n}\r\n\r\n.nav-tabs .nav-link {\r\n  position: relative;\r\n  color: #000;\r\n  transition: .25s all;\r\n\r\n  &:hover {\r\n    border: none;\r\n    background-color: white;\r\n  }\r\n\r\n  &::after {\r\n    content: \"\";\r\n    left: 0;\r\n    width: 100%;\r\n    height: 2px;\r\n    bottom: -1px;\r\n    position: absolute;\r\n    background: $darker-blue;\r\n    transform: scale(0, 1);\r\n    transition: all .25s ease;\r\n  }\r\n\r\n  &.active::after,\r\n  &:hover::after {\r\n    transform: scale(1, 1);\r\n  }\r\n}\r\n","$accent-blue: #0288D1;\r\n$darker-blue: #005B9F;\r\n","@import \"colors\";\r\n\r\n.switch input {\r\n  display: none;\r\n}\r\n\r\n.switch {\r\n  width: 60px;\r\n  height: 30px;\r\n  position: relative;\r\n  display: inline-block;\r\n  margin-bottom: 0;\r\n}\r\n\r\n.language-label {\r\n  top: 4px;\r\n  overflow: hidden;\r\n  position: relative;\r\n}\r\n\r\n.slider {\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  cursor: pointer;\r\n  position: absolute;\r\n  border-radius: 28px;\r\n  background-color: white;\r\n  -webkit-transition: .3s;\r\n  -moz-transition: .3s;\r\n  -ms-transition: .3s;\r\n  -o-transition: .3s;\r\n  transition: .3s;\r\n}\r\n\r\n.slider:before {\r\n  content: \"\";\r\n  left: 6px;\r\n  bottom: 4px;\r\n  width: 22px;\r\n  height: 22px;\r\n  position: absolute;\r\n  border-radius: 50%;\r\n  transition: .3s;\r\n  background-color: $accent-blue;\r\n}\r\n\r\ninput:checked + .slider:before {\r\n  background-color: red;\r\n}\r\n\r\ninput:focus + .slider {\r\n  box-shadow: 0 0 1px #2196F3;\r\n}\r\n\r\ninput:checked + .slider:before {\r\n  -webkit-transform: translateX(26px);\r\n  -moz-transform: translateX(26px);\r\n  -ms-transform: translateX(26px);\r\n  -o-transform: translateX(26px);\r\n  transform: translateX(26px);\r\n}\r\n","@import \"colors\";\r\n@import \"~bootstrap/scss/functions\";\r\n@import \"~bootstrap/scss/variables\";\r\n@import \"~bootstrap/scss/mixins/breakpoints\";\r\n\r\n.checkbox-col {\r\n  display: flex;\r\n\r\n  @include media-breakpoint-between(sm, sm) {\r\n    margin-top: 1rem;\r\n  }\r\n}\r\n\r\n@include media-breakpoint-down(sm) {\r\n  .tooltip-col {\r\n    margin-top: 15px;\r\n  }\r\n}\r\n\r\n.will-hide {\r\n  transition: all .2s ease-in-out;\r\n\r\n  &[hidden] {\r\n    display: initial !important;\r\n    opacity: 0;\r\n\r\n    @include media-breakpoint-down(sm) {\r\n      display: none !important;\r\n    }\r\n  }\r\n}\r\n\r\n.disable-ff-shadow {\r\n  box-shadow: none;\r\n}\r\n\r\n.radio-tile-group {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  justify-content: left;\r\n  padding-left: 15px;\r\n\r\n  @include media-breakpoint-down(xs) {\r\n    width: 100%;\r\n  }\r\n\r\n  .input-container {\r\n    position: relative;\r\n    height: 32px;\r\n    width: 120px;\r\n    margin: 0 15px 0 0;\r\n\r\n    @include media-breakpoint-up(sm) {\r\n      &:last-child {\r\n        margin: 0;\r\n      }\r\n    }\r\n\r\n    @include media-breakpoint-down(xs) {\r\n      margin-bottom: 15px;\r\n      width: 100%;\r\n    }\r\n\r\n    .radio-button {\r\n      opacity: 0;\r\n      position: absolute;\r\n      top: 0;\r\n      left: 0;\r\n      width: 100%;\r\n      height: 100%;\r\n      margin: 0;\r\n      cursor: pointer;\r\n    }\r\n\r\n    .radio-tile {\r\n      display: flex;\r\n      flex-direction: row;\r\n      align-items: center;\r\n      justify-content: center;\r\n      width: 100%;\r\n      height: 100%;\r\n      padding: 1rem;\r\n      border: 2px solid $accent-blue;\r\n      border-radius: 4px;\r\n    }\r\n\r\n    .radio-tile-label {\r\n      margin: 0;\r\n      color: $accent-blue;\r\n      font-weight: 600;\r\n      font-size: 0.75rem;\r\n      text-align: center;\r\n      letter-spacing: 1px;\r\n      text-transform: uppercase;\r\n    }\r\n\r\n    .radio-button:checked + .radio-tile {\r\n      color: white;\r\n      background-color: $accent-blue;\r\n      border: 2px solid $accent-blue;\r\n      // transform: scale(1.1);\r\n\r\n      .radio-tile-label {\r\n        color: white;\r\n        background-color: $accent-blue;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n.checkbox-label {\r\n  display: inline-block;\r\n  color: #fff;\r\n  cursor: pointer;\r\n  position: relative;\r\n\r\n  .checkbox {\r\n    display: inline-block;\r\n    position: relative;\r\n    background-color: transparent;\r\n    width: 25px;\r\n    height: 25px;\r\n    transform-origin: center;\r\n    border: 2px solid $accent-blue;\r\n    border-radius: 4px;\r\n    vertical-align: -6px;\r\n    margin-right: 10px;\r\n    transition: background-color 150ms;\r\n\r\n    &:before {\r\n      content: \"\";\r\n      width: 0;\r\n      height: 2px;\r\n      border-radius: 2px;\r\n      background: $accent-blue;\r\n      position: absolute;\r\n      transform: rotate(45deg);\r\n      top: 10px;\r\n      left: 7px;\r\n      transition: width 50ms ease 50ms;\r\n      transform-origin: 0 0;\r\n    }\r\n\r\n    &:after {\r\n      content: \"\";\r\n      width: 0;\r\n      height: 2px;\r\n      border-radius: 2px;\r\n      background: $accent-blue;\r\n      position: absolute;\r\n      transform: rotate(305deg);\r\n      top: 14px;\r\n      left: 8px;\r\n      transition: width 50ms ease;\r\n      transform-origin: 0 0;\r\n    }\r\n  }\r\n}\r\n\r\n.checkbox-input[type=\"checkbox\"] {\r\n  display: none;\r\n\r\n  &:checked {\r\n    + .checkbox-label {\r\n      .checkbox {\r\n        background-color: $accent-blue;\r\n\r\n        &:after {\r\n          width: 10px;\r\n          background: #fff;\r\n          transition: width 150ms ease 150ms;\r\n        }\r\n\r\n        &:before {\r\n          width: 5px;\r\n          background: #fff;\r\n          transition: width 150ms ease;\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n","// Breakpoint viewport sizes and media queries.\n//\n// Breakpoints are defined as a map of (name: minimum width), order from small to large:\n//\n//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)\n//\n// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.\n\n// Name of the next breakpoint, or null for the last breakpoint.\n//\n//    >> breakpoint-next(sm)\n//    md\n//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    md\n//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))\n//    md\n@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {\n  $n: index($breakpoint-names, $name);\n  @return if($n != null and $n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);\n}\n\n// Minimum breakpoint width. Null for the smallest (first) breakpoint.\n//\n//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    576px\n@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {\n  $min: map-get($breakpoints, $name);\n  @return if($min != 0, $min, null);\n}\n\n// Maximum breakpoint width. Null for the largest (last) breakpoint.\n// The maximum value is calculated as the minimum of the next one less 0.02px\n// to work around the limitations of `min-` and `max-` prefixes and viewports with fractional widths.\n// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\n// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\n// See https://bugs.webkit.org/show_bug.cgi?id=178261\n//\n//    >> breakpoint-max(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    767.98px\n@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {\n  $next: breakpoint-next($name, $breakpoints);\n  @return if($next, breakpoint-min($next, $breakpoints) - .02, null);\n}\n\n// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.\n// Useful for making responsive utilities.\n//\n//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"\"  (Returns a blank string)\n//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"-sm\"\n@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {\n  @return if(breakpoint-min($name, $breakpoints) == null, \"\", \"-#{$name}\");\n}\n\n// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.\n// Makes the @content apply to the given breakpoint and wider.\n@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  @if $min {\n    @media (min-width: $min) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media of at most the maximum breakpoint width. No query for the largest breakpoint.\n// Makes the @content apply to the given breakpoint and narrower.\n@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {\n  $max: breakpoint-max($name, $breakpoints);\n  @if $max {\n    @media (max-width: $max) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media that spans multiple breakpoint widths.\n// Makes the @content apply between the min and max breakpoints\n@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($lower, $breakpoints);\n  $max: breakpoint-max($upper, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($lower, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($upper, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n// Media between the breakpoint's minimum and maximum widths.\n// No minimum for the smallest breakpoint, and no maximum for the largest one.\n// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\n@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  $max: breakpoint-max($name, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($name, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($name, $breakpoints) {\n      @content;\n    }\n  }\n}\n"]}