{"version":3,"sources":["assets/info-filled.svg","serviceWorker.js","index.js","helpers/index.js","actions/index.js","helpers/localization.js","helpers/constants.js","components/Settings.js","components/SparkCalculator.js","components/ExperienceCalculator.js","App.js","reducers/index.js"],"names":["module","exports","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","persistedState","params","SET_SPARK_DATA","LocalizedStrings","en","english","japanese","SparkCalc","ExpRpCalc","crystals","singleTickets","grandTickets","totalRolls","percentage","levelFrom","levelTo","toNextLevel","bonusExp","bonusExpInfo","weaponSummon","character","rank","sameType","totalExperience","archangelItems","rpPercentage","vessels","cantDowngrade","suggestionsWelcomed","jp","ExperienceTypes","Weapon","Character","Rank","ExperienceTables","Settings","dispatch","useDispatch","languageCode","useSelector","className","strings","type","id","onChange","newLanguage","payload","ReactGA","event","category","action","label","checked","Alert","variant","SparkCalculator","handleFieldClick","e","target","select","handleChange","setState","name","value","props","recalculateRolls","parseInt","toFixed","this","Row","Col","xs","md","lg","htmlFor","min","step","max","defaultValue","onClick","disabled","React","Component","connect","ExperienceCalculator","expType","showError","maxLevel","length","experienceTable","recalculateExperience","archangelExp","currentExperience","getRequiredItemsCount","itemExperience","Math","ceil","floor","handleInputChange","handleCheckbox","hidden","OverlayTrigger","overlay","Tooltip","src","infoIcon","alt","width","show","App","Tabs","defaultActiveKey","onSelect","tabKey","modalview","Tab","eventKey","title","language","href","bannerColor","rel","search","includes","queryString","parse","newState","localStorage","getItem","clear","parseQueryParams","JSON","getDefaultState","store","createStore","setLanguage","setItem","stringify","getState","subscribe","app","ReactDOM","render","document","getElementById","initialize","pageview","pathname","URL","process","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"0GAAAA,EAAOC,QAAU,IAA0B,yC,2NCYrCC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,iHAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,M,kBCnF7DC,ECX0BC,E,kDCFjBC,G,MAAiB,kB,wBCKf,M,OAAIC,GAAiB,CAClCC,GAAI,CACFC,QALY,UAMZC,SALa,qBAMbC,UAAW,aACXC,UAAW,cACXC,SAAU,YACVC,cAAe,kBACfC,aAAc,eACdC,WAAY,eACZC,WAAY,cACZC,UAAW,QACXC,QAAS,MACTC,YAAa,iBACbC,SAAU,iBACVC,aAAc,mDACdC,aAAc,kBACdC,UAAW,YACXC,KAAM,OACNC,SAAU,YACVC,gBAAiB,oBACjBC,eAAgB,mBAChBC,aAAc,cACdC,QAAS,WACT3B,MAAO,QACP4B,cAAe,mDACfC,oBAAqB,8EAEvBC,GAAI,CACFxB,QAhCY,UAiCZC,SAhCa,qBAiCbC,UAAW,mDACXC,UAAW,gCACXC,SAAU,sBACVC,cAAe,4BACfC,aAAc,oCACdC,WAAY,gBACZC,WAAY,KACZC,UAAW,gBACXC,QAAS,gBACTC,YAAa,8BACbC,SAAU,oCACVC,aAAc,+GACdC,aAAc,kCACdC,UAAW,qBACXC,KAAM,OACNC,SAAU,6CACVC,gBAAiB,yBACjBE,aAAc,yBACdD,eAAgB,oDAChBE,QAAS,UACT3B,MAAO,qBACP4B,cAAe,yFACfC,oBAAqB,yK,OCxDZE,EAAkB,CAC7BC,OAAQ,SACRC,UAAW,YACXC,KAAM,QAEKC,GAAgB,mBAC1BJ,EAAgBC,OAAS,CACxB,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KACzG,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC5G,KAAM,KAAM,KAAM,KAAM,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC5G,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACzG,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACzG,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAAQ,OAC1G,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OACxG,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OACxG,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OACxG,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QAAS,QAAS,QAAS,QAAS,QAC5G,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAC5G,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAC5G,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,UAdjE,cAgB1BD,EAAgBE,UAAY,CAC3B,EAAG,EAAG,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAM,KAAM,KAAM,KAAM,IAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KAAM,KAC1G,KAAM,KAAM,KAAM,KAAM,KAAM,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MAAO,MAAO,MAAO,KAC3G,MAAO,KAAO,MAAO,MAAO,KAAO,MAAO,IAAO,MAAO,MAAO,KAAO,MAAO,KAAO,MAAO,MAAO,MAAO,MACzG,MAAO,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OACvG,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OACxG,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QAAS,QAAS,QAAS,QAC3G,QAAS,QAAS,QAAS,QAAS,UAvBX,cAyB1BF,EAAgBG,KAAO,CACtB,EAAG,EAAG,GAAI,IAAK,IAAK,IAAK,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KAAM,MAAO,MAAO,MAAO,MAAO,MAAO,MAC5G,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAAQ,OAAQ,OACpG,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OACxG,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QAAS,QACzG,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QACnG,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QACnG,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QACnG,QAAS,QAAS,QAAS,OAAS,QAAS,QAAS,QAAS,QAAS,OAAS,QAAS,QAAS,QACnG,QAAS,QAAS,QAAS,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SACjG,QAAU,SAAU,SAAU,SAAU,SAAU,QAAU,SAAU,SAAU,SAAU,SAAU,SACpG,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SACpG,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SACpG,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SACpG,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SACpG,SAAU,SAAU,SAAU,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAChG,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UACnG,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UACnG,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UACnG,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UACnG,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UACnG,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UACnG,UAAW,UAAW,UAAW,YA/CR,GCqCdE,EAnCE,WACf,IAAMC,EAAWC,cACXC,EAAeC,aAAY,SAAA/C,GAAK,OAAIA,EAAM8C,gBAahD,OACE,oCACE,2BAAOE,UAAU,kBAAkBC,EAAQpC,QAA3C,QACA,2BAAOmC,UAAU,UACf,2BACEE,KAAK,WACLC,GAAG,iBACHC,SAlBqB,WAC3B,IAAMC,EDda,OCcCP,EDbA,KADD,KCgBnBF,EAAS,CAAEM,KHfa,eGeOI,QAASD,IACxCE,IAAQC,MAAM,CACZC,SAAU,kBACVC,OAAQ,kBACRC,MAAON,KAYHO,QD/Bc,OC+BLd,IAEX,0BAAME,UAAU,YAElB,2BAAOA,UAAU,kBAAjB,OAAyCC,EAAQnC,UACjD,kBAAC+C,EAAA,EAAD,CAAOC,QAAQ,OAAOd,UAAU,aAC7BC,EAAQb,uB,wDChCX2B,E,2MACJ/D,MAAQ,CACNiB,SAAU,EACVC,cAAe,EACfC,aAAc,G,EAWhB6C,iBAAmB,SAACC,GAClBA,EAAEC,OAAOC,U,EAGXC,aAAe,SAACH,GACd,EAAKI,SAAL,eAAiBJ,EAAEC,OAAOI,KAAOL,EAAEC,OAAOK,QAAS,WACjD,EAAKC,MAAM5B,SAAS,CAClBM,KAAMxC,EACN4C,QAAS,CACPrC,SAAU,EAAKjB,MAAMiB,SACrBC,cAAe,EAAKlB,MAAMkB,cAC1BC,aAAc,EAAKnB,MAAMmB,gBAG7B,EAAKsD,uB,EAITA,iBAAmB,WAAO,IAAD,EAC2B,EAAKzE,MAA/CiB,EADe,EACfA,SAAUC,EADK,EACLA,cAAeC,EADV,EACUA,aAC3BC,GAAesD,SAASzD,EAAU,IAAM,IAC5CyD,SAASxD,EAAe,IACM,GAA7BwD,SAASvD,EAAc,KACxBwD,UACItD,KAAgBD,EAAa,IAAM,KAAO,IAChD,EAAKiD,SAAS,CAAEjD,aAAYC,gB,oFAhC5BuD,KAAKP,SAAS,CACZpD,SAAU2D,KAAKJ,MAAMvD,SACrBC,cAAe0D,KAAKJ,MAAMtD,cAC1BC,aAAcyD,KAAKJ,MAAMrD,cACxByD,KAAKH,oB,+BAgCR,OACE,oCACE,kBAACI,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAG,IAAIC,GAAG,IAAIC,GAAG,KACpB,2BAAOjC,UAAU,UAAUkC,QAAQ,YAAYjC,EAAQhC,UACvD,2BACEkE,IAAI,IACJC,KAAK,MACLC,IAAI,SACJnC,KAAK,SACLF,UAAU,0CACVG,GAAG,WACHmB,KAAK,WACLgB,aAAcV,KAAK5E,MAAMiB,SACzBsE,QAASX,KAAKZ,iBACdZ,SAAUwB,KAAKR,gBAGnB,kBAACU,EAAA,EAAD,CAAKC,GAAG,IAAIC,GAAG,IAAIC,GAAG,KACpB,2BAAOjC,UAAU,UAAUkC,QAAQ,iBAAiBjC,EAAQ/B,eAC5D,2BACEiE,IAAI,IACJE,IAAI,OACJnC,KAAK,SACLF,UAAU,wBACVG,GAAG,gBACHmB,KAAK,gBACLgB,aAAcV,KAAK5E,MAAMkB,cACzBqE,QAASX,KAAKZ,iBACdZ,SAAUwB,KAAKR,gBAGnB,kBAACU,EAAA,EAAD,CAAKC,GAAG,IAAIC,GAAG,IAAIC,GAAG,KACpB,2BAAOjC,UAAU,UAAUkC,QAAQ,gBAAgBjC,EAAQ9B,cAC3D,2BACEgE,IAAI,IACJE,IAAI,MACJnC,KAAK,SACLF,UAAU,wBACVG,GAAG,eACHmB,KAAK,eACLgB,aAAcV,KAAK5E,MAAMmB,aACzBoE,QAASX,KAAKZ,iBACdZ,SAAUwB,KAAKR,iBAIrB,kBAACS,EAAA,EAAD,CAAK7B,UAAU,QACb,kBAAC8B,EAAA,EAAD,CAAKC,GAAG,IAAIC,GAAG,IAAIC,GAAG,KACpB,2BAAOjC,UAAU,UAAUkC,QAAQ,cAAcjC,EAAQ7B,YACzD,2BACEoE,UAAQ,EACRtC,KAAK,OACLF,UAAU,wBACVG,GAAG,aACHmB,KAAK,aACLgB,aAAcV,KAAK5E,MAAMoB,WACzBmE,QAASX,KAAKZ,iBACdZ,SAAUwB,KAAKR,gBAGnB,kBAACU,EAAA,EAAD,CAAKC,GAAG,IAAIC,GAAG,IAAIC,GAAG,KACpB,2BAAOjC,UAAU,UAAUkC,QAAQ,cAAcjC,EAAQ5B,YACzD,2BACEmE,UAAQ,EACRtC,KAAK,OACLF,UAAU,wBACVG,GAAG,aACHmB,KAAK,aACLgB,aAAcV,KAAK5E,MAAMqB,WACzBkE,QAASX,KAAKZ,iBACdZ,SAAUwB,KAAKR,sB,GAnHCqB,IAAMC,WA4HrBC,eAAQ,SAAC3F,GAAD,MAAY,CACjCiB,SAAUjB,EAAMiB,SAChBC,cAAelB,EAAMkB,cACrBC,aAAcnB,EAAMmB,gBAHPwE,CAIX5B,G,yCC8IW6B,E,2MA5Qb5F,MAAQ,CACN6F,QAASvD,EAAgBC,OACzBd,SAAU,GACVK,UAAU,EACVC,gBAAiB,EACjBC,eAAgB,EAChBE,QAAS,EACTX,QAAS,GACTD,UAAW,EACXE,YAAa,EACbsE,WAAW,EACXC,SAAUrD,EAAiBJ,EAAgBC,QAAQyD,OAAS,EAC5DC,gBAAiBvD,EAAiBJ,EAAgBC,S,EAOpD2D,sBAAwB,WAAO,IAAD,EACG,EAAKlG,MAA5BsB,EADoB,EACpBA,UAAWC,EADS,EACTA,QACbwE,EAAWrD,EAAiB,EAAK1C,MAAM6F,SAASG,OAAS,EAE/D,EAAK3B,SAAS,CACZ4B,gBAAiBvD,EAAiB,EAAK1C,MAAM6F,SAC7CvE,UAAWA,EAAYyE,EAAWA,EAAWzE,EAC7CC,QAASA,EAAUwE,EAAWA,EAAWxE,EACzCwE,aACC,WAAO,IAAD,EACmF,EAAK/F,MAAvFyB,EADD,EACCA,SAAUwE,EADX,EACWA,gBAAiBJ,EAD5B,EAC4BA,QAASvE,EADrC,EACqCA,UAAWC,EADhD,EACgDA,QAASO,EADzD,EACyDA,SAAUN,EADnE,EACmEA,YACpE2E,EAAerE,EAAW,IAAM,IAElCsE,EAAoB,EACpBpE,EAAiB,EAEfqE,EAAwB,SAACtE,EAAiBuE,GAC9C,OAAOC,KAAKC,KAAKzE,GAAmBuE,EAAiBC,KAAKE,MAAMH,GAAkB7E,EAAW,SAG/F,GAAIH,EAAYC,EACd,EAAK8C,SAAS,CAAEyB,WAAW,QAD7B,CAIA,EAAKzB,SAAS,CAAEyB,WAAW,IACvBtE,EAAc,IAChB4E,EAAqBH,EAAgB3E,EAAY,GAAK2E,EAAgB3E,GAAcE,GAEtF,IAAMO,EAAkBkE,EAAgB1E,GAAW0E,EAAgB3E,GAAa8E,EAChF,GAAIP,IAAYvD,EAAgBG,KAAM,CACpC,IAAMP,EAAUmE,EAAsBtE,EAlBtB,KAmBhBC,EAAiBqE,EAAsBtE,EAAiBoE,GACxD,EAAK9B,SAAS,CAAEnC,iBAEhBF,GAAkBiE,EAAgB3E,GAAa2E,EAAgBA,EAAgBD,OAAS,GAAK,KAAKrB,QAAQ,GAE5G,EAAKN,SAAS,CAAErC,iBAAgBD,yB,EAIpC2E,kBAAoB,SAACzC,GACnB,EAAKI,SAAL,eAAiBJ,EAAEC,OAAOI,KAAOI,SAAST,EAAEC,OAAOK,QAAU,KAAM,WACjE,EAAK2B,4B,EAIT9B,aAAe,SAACH,GACd,EAAKI,SAAL,eAAiBJ,EAAEC,OAAOI,KAAOL,EAAEC,OAAOK,QAAS,WACjD,EAAK2B,4B,EAITS,eAAiB,SAAC1C,GAChB,EAAKI,SAAL,eAAiBJ,EAAEC,OAAOI,KAAOL,EAAEC,OAAON,UAAW,WACnD,EAAKsC,4B,mFAzDPtB,KAAKsB,0B,+BA8DL,OACE,oCACE,kBAACrB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAG,IAAIC,GAAG,IAAIC,GAAG,KACpB,2BAAOjC,UAAU,UAAUkC,QAAQ,aAAajC,EAAQ3B,WACxD,2BACE6D,IAAI,IACJE,IAAKT,KAAK5E,MAAM+F,SAChB7C,KAAK,SACLF,UAAU,wBACVG,GAAG,YACHmB,KAAK,YACLC,MAAOK,KAAK5E,MAAMsB,UAClB8B,SAAUwB,KAAK8B,qBAGnB,kBAAC5B,EAAA,EAAD,CAAKC,GAAG,IAAIC,GAAG,IAAIC,GAAG,KACpB,2BAAOjC,UAAU,UAAUkC,QAAQ,WAAWjC,EAAQ1B,SACtD,2BACE4D,IAAI,IACJE,IAAKT,KAAK5E,MAAM+F,SAChB7C,KAAK,SACLF,UAAU,wBACVG,GAAG,UACHmB,KAAK,UACLC,MAAOK,KAAK5E,MAAMuB,QAClB6B,SAAUwB,KAAK8B,qBAGnB,kBAAC5B,EAAA,EAAD,CAAKC,GAAG,IAAIC,GAAG,IAAIC,GAAG,KACpB,2BAAOjC,UAAU,UAAUkC,QAAQ,eAAejC,EAAQzB,aAC1D,2BACE2D,IAAI,IACJC,KAAK,MACLlC,KAAK,SACLF,UAAU,wBACVG,GAAG,cACHmB,KAAK,cACLC,MAAOK,KAAK5E,MAAMwB,YAClB4B,SAAUwB,KAAK8B,qBAGnB,kBAAC5B,EAAA,EAAD,CACEC,GAAG,IAAIC,GAAG,IAAIC,GAAG,IAAIjC,UAAU,wBAC/B4D,OAAQhC,KAAK5E,MAAM6F,UAAYvD,EAAgBG,MAE/C,kBAACoE,EAAA,EAAD,CAAgBC,QAAS,kBAACC,EAAA,EAAD,CAAS5D,GAAG,sBAAsBF,EAAQvB,eACjE,2BAAOsB,UAAU,UAAUkC,QAAQ,YACjC,yBAAK8B,IAAKC,IAAUC,IAAI,YAAYC,MAAM,OAD5C,IACqDlE,EAAQxB,WAG/D,2BACE0D,IAAI,IACJjC,KAAK,SACLF,UAAU,wBACVG,GAAG,WACHmB,KAAK,WACLC,MAAOK,KAAK5E,MAAMyB,SAClB2B,SAAUwB,KAAK8B,sBAIrB,kBAAC7B,EAAA,EAAD,CAAK7B,UAAU,QACb,yBAAKA,UAAU,oBACb,yBAAKA,UAAU,mBACb,2BACEG,GAAG,mBACHD,KAAK,QACLoB,KAAK,UACLtB,UAAU,eACVuB,MAAOjC,EAAgBC,OACvBqB,QAASgB,KAAK5E,MAAM6F,UAAYvD,EAAgBC,OAChDa,SAAUwB,KAAKR,eAEjB,yBAAKpB,UAAU,cACb,2BACEkC,QAAQ,mBACRlC,UAAU,oBAETC,EAAQtB,gBAIf,yBAAKqB,UAAU,mBACb,2BACEG,GAAG,sBACHD,KAAK,QACLoB,KAAK,UACLtB,UAAU,eACVuB,MAAOjC,EAAgBE,UACvBoB,QAASgB,KAAK5E,MAAM6F,UAAYvD,EAAgBE,UAChDY,SAAUwB,KAAKR,eAEjB,yBAAKpB,UAAU,cACb,2BACEkC,QAAQ,sBACRlC,UAAU,oBAETC,EAAQrB,aAIf,yBAAKoB,UAAU,mBACb,2BACEG,GAAG,iBACHD,KAAK,QACLoB,KAAK,UACLtB,UAAU,eACVuB,MAAOjC,EAAgBG,KACvBmB,QAASgB,KAAK5E,MAAM6F,UAAYvD,EAAgBG,KAChDW,SAAUwB,KAAKR,eAEjB,yBAAKpB,UAAU,cACb,2BACEkC,QAAQ,iBACRlC,UAAU,oBAETC,EAAQpB,SAKjB,kBAACiD,EAAA,EAAD,CACEE,GAAG,IACHhC,UAAU,4CACV4D,OAAQhC,KAAK5E,MAAM6F,UAAYvD,EAAgBG,MAE/C,2BAAOyC,QAAQ,WAAWlC,UAAU,oBAAoBC,EAAQnB,UAChE,2BACEoB,KAAK,WACLC,GAAG,WACHmB,KAAK,WACLtB,UAAU,iBACVY,QAASgB,KAAK5E,MAAM8B,SACpBsB,SAAUwB,KAAK+B,iBAEjB,2BAAOzB,QAAQ,WAAWlC,UAAU,uBAClC,0BAAMA,UAAU,gBAItB,kBAAC6B,EAAA,EAAD,CAAK7B,UAAU,QACb,kBAAC8B,EAAA,EAAD,CAAKC,GAAG,IAAIC,GAAG,IAAIC,GAAG,KACpB,2BAAOjC,UAAU,UAAUkC,QAAQ,mBAAmBjC,EAAQlB,iBAC9D,2BACEyD,UAAQ,EACRtC,KAAK,SACLC,GAAG,kBACHmB,KAAK,kBACLtB,UAAU,wBACVuB,MAAOK,KAAK5E,MAAM+B,gBAClBqB,SAAUwB,KAAKR,gBAGnB,kBAACU,EAAA,EAAD,CAAKC,GAAG,IAAIC,GAAG,IAAIC,GAAG,KACpB,2BAAOjC,UAAU,UAAUkC,QAAQ,kBAChCN,KAAK5E,MAAM6F,UAAYvD,EAAgBG,KAAOQ,EAAQjB,eAAiBiB,EAAQhB,cAElF,2BACEuD,UAAQ,EACRtC,KAAK,SACLC,GAAG,iBACHmB,KAAK,iBACLtB,UAAU,wBACVuB,MAAOK,KAAK5E,MAAMgC,eAClBoB,SAAUwB,KAAKR,gBAGnB,kBAACU,EAAA,EAAD,CAAKC,GAAG,IAAIC,GAAG,IAAIC,GAAG,IAAIjC,UAAU,YAAY4D,OAAQhC,KAAK5E,MAAM6F,UAAYvD,EAAgBG,MAC7F,2BAAOO,UAAU,UAAUkC,QAAQ,WAAWjC,EAAQf,SACtD,2BACEsD,UAAQ,EACRtC,KAAK,SACLC,GAAG,UACHmB,KAAK,UACLC,MAAOK,KAAK5E,MAAMkC,QAClBc,UAAU,wBACVI,SAAUwB,KAAKR,iBAIrB,kBAACP,EAAA,EAAD,CAAOC,QAAQ,SAASd,UAAU,YAAYoE,KAAMxC,KAAK5E,MAAM8F,WAC7D,4BAAQ9C,UAAU,gBAAgBC,EAAQ1C,MAA1C,MACA,0BAAMyC,UAAU,gBAAgBC,EAAQd,qB,GAtQfsD,IAAMC,WCyC1B2B,EAnCH,WACV,IAAMzE,EAAWC,cACXC,EAAeC,aAAY,SAAA/C,GAAK,OAAIA,EAAM8C,gBJd1B,OIgBlBA,GACFF,EAAS,CAAEM,KNjBa,eMiBOI,QJjBX,OIwBtB,OACE,yBAAKN,UAAU,qBACb,kBAACsE,EAAA,EAAD,CAAMnE,GAAG,YAAYoE,iBAAiB,QAAQC,SAN1B,SAACC,GACvBlE,IAAQmE,UAAUD,KAMd,kBAACE,EAAA,EAAD,CAAKC,SAAS,QAAQC,MAAO5E,EAAQlC,WACnC,kBAAC,EAAD,CAAiB+G,SAAUhF,KAE7B,kBAAC6E,EAAA,EAAD,CAAKC,SAAS,MAAMC,MAAO5E,EAAQjC,WACjC,kBAAC,EAAD,CAAsB8G,SAAUhF,KAElC,kBAAC6E,EAAA,EAAD,CAAKC,SAAS,WAAWC,MAAM,yBAC7B,kBAAC,EAAD,QAGJ,kBAAC,IAAD,CACEE,KAAK,2CACLC,YAAY,UACZ9D,OAAO,SACP+D,IAAI,iB,QR9BNxH,EAASzB,OAAOC,SAASiJ,OAI7B1H,GCd4BC,EDaZA,GCZT0H,SAAS,aAAe1H,EAAO0H,SAAS,kBAAoB1H,EAAO0H,SAAS,gBAErD,SAAC1H,GAAY,IAAD,EACQ2H,IAAYC,MAAM5H,GAA5DQ,EADkC,EAClCA,SAAUC,EADwB,EACxBA,cAAeC,EADS,EACTA,aAC3BmH,EAAW,CACfxF,aAAcyF,aAAaC,QAAQ,SAAW,KAC9CvH,SAAUA,GAAY,EACtBC,cAAeA,GAAiB,EAChCC,aAAcA,GAAgB,GAKhC,OAFAoH,aAAaE,QAENH,EDAUI,CAAiBjI,GACzB,eAAgB8H,aACRI,KAAKN,MAAME,aAAaC,QAAQ,eCCpB,WAC7B,IAAMF,EAAW,CACfxF,aAAcyF,aAAaC,QAAQ,SAAW,KAC9CvH,SAAUsH,aAAaC,QAAQ,aAAe,EAC9CtH,cAAeqH,aAAaC,QAAQ,YAAc,EAClDrH,aAAcoH,aAAaC,QAAQ,SAAW,GAKhD,OAFAD,aAAaE,QAENH,EDTUM,GAGnB,IAAMC,EAAQC,aSpBC,WAA+B,IAArB9I,EAAoB,uDAAZ,GAAI0D,EAAQ,uCAC3C,OAAQA,EAAOR,MACb,KAAKxC,EACH,OAAO,eACFV,EADL,GAEK0D,EAAOJ,SAGd,IPVwB,eOYtB,OADAL,EAAQ8F,YAAYrF,EAAOJ,SACpB,eACFtD,EADL,CAEE8C,aAAcY,EAAOJ,UAGzB,QACE,OAAOtD,KTKXQ,GAIF+H,aAAaS,QAAQ,aAAcL,KAAKM,UAAUJ,EAAMK,aACxDL,EAAMM,WAAU,WACdZ,aAAaS,QAAQ,aAAcL,KAAKM,UAAUJ,EAAMK,gBAG1D,IAAME,EACJ,kBAAC,IAAD,CAAUP,MAAOA,GACf,kBAAC,EAAD,OAGJQ,IAASC,OAAOF,EAAKG,SAASC,eAAe,SAC7CjG,IAAQkG,WAAW,kBACnBlG,IAAQmG,SAAS1K,OAAOC,SAAS0K,UDlB1B,SAAkBrK,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIqK,IAAIC,GAAwB7K,OAAOC,SAAS8I,MACpD+B,SAAW9K,OAAOC,SAAS6K,OAIvC,OAGF9K,OAAO+K,iBAAiB,QAAQ,WAC9B,IAAM1K,EAAK,UAAMwK,GAAN,sBAEP/K,IAgEV,SAAiCO,EAAOC,GAEtC0K,MAAM3K,GACHK,MAAK,SAAAuK,GAEJ,IAAMC,EAAcD,EAASE,QAAQC,IAAI,gBAEnB,MAApBH,EAASI,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5C/K,UAAUC,cAAc+K,MAAM7K,MAAK,SAAAC,GACjCA,EAAa6K,aAAa9K,MAAK,WAC7BV,OAAOC,SAASwL,eAKpBrL,EAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IACN,oEArFAuK,CAAwBrL,EAAOC,GAI/BC,UAAUC,cAAc+K,MAAM7K,MAAK,WACjCQ,QAAQC,IACN,iHAMJf,EAAgBC,EAAOC,OCT/BE,K","file":"static/js/main.588118f2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/info-filled.e1681639.svg\";","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react'\r\nimport ReactGA from 'react-ga'\r\nimport ReactDOM from 'react-dom'\r\nimport { createStore } from 'redux'\r\nimport { Provider } from 'react-redux'\r\nimport * as serviceWorker from './serviceWorker'\r\nimport 'bootstrap/scss/bootstrap.scss'\r\nimport './index.scss'\r\nimport { getDefaultState, parseQueryParams, isBookmarklet } from './helpers'\r\nimport App from './App'\r\nimport rootReducer from './reducers'\r\n\r\nconst params = window.location.search\r\nlet persistedState\r\n\r\nif (isBookmarklet(params)) {\r\n  persistedState = parseQueryParams(params)\r\n} else if ('reduxState' in localStorage) {\r\n  persistedState = JSON.parse(localStorage.getItem('reduxState'))\r\n} else {\r\n  persistedState = getDefaultState()\r\n}\r\n\r\nconst store = createStore(rootReducer,\r\n  persistedState\r\n  // window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n)\r\n\r\nlocalStorage.setItem('reduxState', JSON.stringify(store.getState()))\r\nstore.subscribe(() => {\r\n  localStorage.setItem('reduxState', JSON.stringify(store.getState()))\r\n})\r\n\r\nconst app = (\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>\r\n)\r\nReactDOM.render(app, document.getElementById('root'))\r\nReactGA.initialize('UA-101216558-2')\r\nReactGA.pageview(window.location.pathname)\r\nserviceWorker.register()\r\n","import queryString from 'query-string'\r\n\r\nexport const isBookmarklet = (params) =>\r\n  params.includes('crystals') || params.includes('singleTickets') || params.includes('grandTickets')\r\n\r\nexport const parseQueryParams = (params) => {\r\n  const { crystals, singleTickets, grandTickets } = queryString.parse(params)\r\n  const newState = {\r\n    languageCode: localStorage.getItem('lang') || 'en',\r\n    crystals: crystals || 0,\r\n    singleTickets: singleTickets || 0,\r\n    grandTickets: grandTickets || 0\r\n  }\r\n\r\n  localStorage.clear()\r\n\r\n  return newState\r\n}\r\n\r\nexport const getDefaultState = () => {\r\n  const newState = {\r\n    languageCode: localStorage.getItem('lang') || 'en',\r\n    crystals: localStorage.getItem('crystals') || 0,\r\n    singleTickets: localStorage.getItem('singles') || 0,\r\n    grandTickets: localStorage.getItem('tens') || 0\r\n  }\r\n\r\n  localStorage.clear()\r\n\r\n  return newState\r\n}\r\n","export const SET_SPARK_DATA = 'SET_SPARK_DATA'\r\nexport const SET_LANGUAGE = 'SET_LANGUAGE'\r\n","import LocalizedStrings from 'react-localization'\r\n\r\nconst english = 'English'\r\nconst japanese = '日本語'\r\n\r\nexport default new LocalizedStrings({\r\n  en: {\r\n    english,\r\n    japanese,\r\n    SparkCalc: 'Spark Calc',\r\n    ExpRpCalc: 'RP&EXP Calc',\r\n    crystals: 'Crystals:',\r\n    singleTickets: 'Single tickets:',\r\n    grandTickets: '10x tickets:',\r\n    totalRolls: 'Total rolls:',\r\n    percentage: 'Percentage:',\r\n    levelFrom: 'From:',\r\n    levelTo: 'To:',\r\n    toNextLevel: 'To next level:',\r\n    bonusExp: 'Bonus Exp (%):',\r\n    bonusExpInfo: 'Usually comes from Wonders and Elemental Skills.',\r\n    weaponSummon: 'Weapon / Summon',\r\n    character: 'Character',\r\n    rank: 'Rank',\r\n    sameType: 'Same type',\r\n    totalExperience: 'Total Experience:',\r\n    archangelItems: 'Archangel Items:',\r\n    rpPercentage: 'Total RP %:',\r\n    vessels: 'Vessels:',\r\n    error: 'Error',\r\n    cantDowngrade: 'You cannot downgrade weapons/summons/characters.',\r\n    suggestionsWelcomed: 'If you have any suggestions or ideas, contact me on Discord: IAmVisco#7099'\r\n  },\r\n  jp: {\r\n    english,\r\n    japanese,\r\n    SparkCalc: '蒼光の御印の計算',\r\n    ExpRpCalc: 'RPとEXPの計算',\r\n    crystals: '宝晶石:',\r\n    singleTickets: 'チケット:',\r\n    grandTickets: '10連チケット:',\r\n    totalRolls: '合計:',\r\n    percentage: '%:',\r\n    levelFrom: 'から:',\r\n    levelTo: 'まで:',\r\n    toNextLevel: '次のLvまで:',\r\n    bonusExp: ' ボーナスEXP (%):',\r\n    bonusExpInfo: '普通に大事なものと属性強化スキルから',\r\n    weaponSummon: '武器/召喚石',\r\n    character: 'キャラ',\r\n    rank: 'Rank',\r\n    sameType: '同じ武器の種類',\r\n    totalExperience: 'EXPの合計:',\r\n    rpPercentage: 'RPの合計%:',\r\n    archangelItems: 'アークエンジェル:',\r\n    vessels: '杯:',\r\n    error: 'エラー',\r\n    cantDowngrade: '武器/召喚石/キャラを下がらない',\r\n    suggestionsWelcomed: '何か考えと助言があれば私にDiscord：IAmVisco＃7099で連絡してください'\r\n  }\r\n})\r\n","export const English = 'en'\r\nexport const Japanese = 'jp'\r\nexport const ExperienceTypes = {\r\n  Weapon: 'weapon',\r\n  Character: 'character',\r\n  Rank: 'rank'\r\n}\r\nexport const ExperienceTables = {\r\n  [ExperienceTypes.Weapon]: [\r\n    0, 0, 10, 22, 36, 52, 70, 90, 112, 136, 162, 190, 220, 255, 295, 340, 390, 450, 520, 600, 690, 790, 910, 1050,\r\n    1210, 1390, 1590, 1810, 2050, 2310, 2590, 2890, 3210, 3550, 3910, 4290, 4690, 5110, 5550, 6010, 6490, 6990, 7510,\r\n    8050, 8610, 9190, 9790, 10410, 11050, 11710, 12390, 13090, 13810, 14550, 15310, 16090, 16890, 17710, 18550, 19410,\r\n    20290, 21190, 22110, 23050, 24010, 24990, 25990, 27010, 28050, 29110, 30190, 31290, 32410, 33550, 34710, 35890,\r\n    37090, 38310, 39550, 40810, 42090, 43990, 44710, 46050, 47410, 48790, 50190, 51610, 53050, 54510, 55990, 57490,\r\n    59010, 60550, 62110, 63690, 65290, 66910, 68550, 70210, 71890, 77090, 82490, 88090, 93890, 99890, 106090, 112490,\r\n    119090, 125890, 132890, 140090, 147490, 155090, 162890, 170890, 179090, 187490, 196090, 204890, 213890, 223190,\r\n    232790, 242690, 252890, 263490, 274490, 285990, 297990, 310490, 323590, 337290, 351590, 366490, 382090, 398390,\r\n    415390, 433090, 451590, 470890, 490990, 511990, 533990, 556990, 580990, 605990, 631990, 658990, 686990, 715990,\r\n    745990, 775990, 805990, 835990, 865990, 895990, 925990, 955990, 985990, 1015990, 1045990, 1075990, 1105990, 1135990,\r\n    1165990, 1195990, 1225990, 1255990, 1285990, 1315990, 1345990, 1375990, 1405990, 1435990, 1465990, 1495990, 1525990,\r\n    1555990, 1585990, 1615990, 1645990, 1675990, 1705990, 1735990, 1765990, 1795990, 1825990, 1855990, 1885990, 1915990,\r\n    1945990, 1975990, 2005990, 2035990, 2065990, 2095990, 2125990, 2155990, 2185990, 2215990, 2245990\r\n  ],\r\n  [ExperienceTypes.Character]: [\r\n    0, 0, 30, 100, 200, 320, 460, 620, 800, 1000, 1220, 1460, 1720, 2000, 2300, 2650, 3050, 3500, 4000, 4550, 5150,\r\n    5800, 6500, 7300, 8200, 9200, 10300, 11500, 12800, 14200, 15700, 17300, 19000, 20800, 22700, 24700, 26800, 29000,\r\n    31400, 34000, 36800, 39800, 43000, 46400, 50000, 53800, 57800, 62000, 66400, 71000, 75800, 80800, 86050, 91550,\r\n    97300, 103300, 109550, 116050, 122800, 129800, 137050, 144550, 152350, 160450, 168850, 177550, 186550, 196050,\r\n    206050, 216550, 227550, 239050, 251050, 263550, 276550, 290050, 304050, 318550, 333550, 349050, 365050, 415050,\r\n    435050, 456050, 478050, 501050, 525050, 550050, 576050, 603050, 703050, 853050, 1053050, 1303050, 1603050, 1953050,\r\n    2353050, 2803050, 3303050, 3803050, 4803050\r\n  ],\r\n  [ExperienceTypes.Rank]: [\r\n    0, 0, 50, 200, 500, 900, 1500, 2200, 2900, 3800, 4900, 6500, 8000, 9600, 11500, 13500, 15600, 17800, 20100, 22950,\r\n    26500, 30450, 34450, 38900, 43850, 49350, 55450, 62200, 69650, 77850, 86850, 96700, 107450, 119150, 131850,\r\n    145600, 160450, 176450, 193650, 212100, 231850, 252950, 275450, 299400, 324850, 351850, 380450, 410700, 442650,\r\n    476350, 511850, 549200, 588450, 629650, 672850, 718100, 765450, 814950, 866650, 920600, 976850, 1035450, 1096450,\r\n    1159900, 1225850, 1294350, 1365450, 1439200, 1515650, 1594850, 1676850, 1761700, 1849450, 1940150, 2033850,\r\n    2130600, 2230450, 2333450, 2439650, 2549100, 2661850, 2777950, 2897450, 3020400, 3146850, 3276850, 3410450,\r\n    3547700, 3688650, 3833350, 3981850, 4134200, 4290450, 4450650, 4614850, 4783100, 4955450, 5131950, 5312650,\r\n    5497600, 5686850, 5936850, 6197000, 6467400, 6748300, 7039900, 7342400, 7656000, 7980900, 8317300, 8665400,\r\n    9025400, 9397500, 9781900, 10178800, 10588400, 11010900, 11446500, 11895400, 12357800, 12833900, 13323900,\r\n    13828000, 14346400, 14879300, 15426900, 15989400, 16567000, 17159900, 17768300, 18392400, 19032400, 19688600,\r\n    20361300, 21050800, 21757400, 22481400, 23223100, 23982800, 24760800, 25557400, 26372900, 27207600, 28061800,\r\n    28935800, 29829800, 30744200, 31679400, 32635800, 33613800, 34613800, 35636300, 36682800, 37754800, 38853800,\r\n    39981800, 41141800, 42336800, 43571800, 44851800, 46181800, 47571800, 49031800, 50571800, 52201800, 53931800,\r\n    55781800, 57771800, 59921800, 62251800, 64781800, 67531800, 70541800, 73821800, 77371800, 81276800, 85197800,\r\n    89136300, 93092800, 97069300, 101067800, 105091300, 109142800, 113227300, 117349800, 121515300, 125733800,\r\n    130015300, 134369800, 138807300, 143337800, 147981300, 152757800, 157687300, 162789800, 168085300, 173598800,\r\n    179355300, 185379800, 191697300, 198332800, 204968300, 211603800, 218239300, 224874800, 231510300, 238145800,\r\n    244781300, 251416800, 258052300, 264687800, 271323300, 277958800, 284594300, 291229800, 297865300, 304500800,\r\n    311136300, 317771800, 324407300, 331042800, 337678300, 344313800, 350949300, 357584800, 364220300, 370855800,\r\n    377516440, 384202310, 390913500, 397650100, 404412200, 411199890, 418013260, 424852400, 431717400, 438608350,\r\n    445525340, 452468460, 459437800, 466433450, 473455500, 480504040, 487579160, 494680950, 501809500, 508964900,\r\n    516147240, 523356610, 530593100, 537856800\r\n  ]\r\n}\r\n","import React from 'react'\r\nimport ReactGA from 'react-ga'\r\nimport { Alert } from 'react-bootstrap'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport '../styles/Settings.scss'\r\nimport { SET_LANGUAGE } from '../actions'\r\nimport strings from '../helpers/localization'\r\nimport { English, Japanese } from '../helpers/constants'\r\n\r\nconst Settings = () => {\r\n  const dispatch = useDispatch()\r\n  const languageCode = useSelector(state => state.languageCode)\r\n\r\n  const handleCheckboxChange = () => {\r\n    const newLanguage = languageCode === English ? Japanese : English\r\n\r\n    dispatch({ type: SET_LANGUAGE, payload: newLanguage })\r\n    ReactGA.event({\r\n      category: 'Settings change',\r\n      action: 'Language change',\r\n      label: newLanguage\r\n    })\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <label className='language-label'>{strings.english}&nbsp;</label>\r\n      <label className='switch'>\r\n        <input\r\n          type='checkbox'\r\n          id='languageSwitch'\r\n          onChange={handleCheckboxChange}\r\n          checked={languageCode === Japanese}\r\n        />\r\n        <span className='slider' />\r\n      </label>\r\n      <label className='language-label'>&nbsp;{strings.japanese}</label>\r\n      <Alert variant='info' className='mb-0 mt-3'>\r\n        {strings.suggestionsWelcomed}\r\n      </Alert>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Settings\r\n","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Col, Row } from 'react-bootstrap'\r\nimport strings from '../helpers/localization'\r\nimport { SET_SPARK_DATA } from '../actions'\r\n\r\nclass SparkCalculator extends React.Component {\r\n  state = {\r\n    crystals: 0,\r\n    singleTickets: 0,\r\n    grandTickets: 0\r\n  }\r\n\r\n  componentWillMount() {\r\n    this.setState({\r\n      crystals: this.props.crystals,\r\n      singleTickets: this.props.singleTickets,\r\n      grandTickets: this.props.grandTickets\r\n    }, this.recalculateRolls)\r\n  }\r\n\r\n  handleFieldClick = (e) => {\r\n    e.target.select()\r\n  }\r\n\r\n  handleChange = (e) => {\r\n    this.setState({ [e.target.name]: e.target.value }, () => {\r\n      this.props.dispatch({\r\n        type: SET_SPARK_DATA,\r\n        payload: {\r\n          crystals: this.state.crystals,\r\n          singleTickets: this.state.singleTickets,\r\n          grandTickets: this.state.grandTickets\r\n        }\r\n      })\r\n      this.recalculateRolls()\r\n    })\r\n  }\r\n\r\n  recalculateRolls = () => {\r\n    const { crystals, singleTickets, grandTickets } = this.state\r\n    const totalRolls = ((parseInt(crystals, 10) / 300) +\r\n      parseInt(singleTickets, 10) +\r\n      (parseInt(grandTickets, 10) * 10)\r\n    ).toFixed()\r\n    const percentage = ~~(totalRolls / 300 * 100) + '%'\r\n    this.setState({ totalRolls, percentage })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <Row>\r\n          <Col xs='4' md='3' lg='2'>\r\n            <label className='no-wrap' htmlFor='crystals'>{strings.crystals}</label>\r\n            <input\r\n              min='0'\r\n              step='100'\r\n              max='999999'\r\n              type='number'\r\n              className='input-sm form-control disable-ff-shadow'\r\n              id='crystals'\r\n              name='crystals'\r\n              defaultValue={this.state.crystals}\r\n              onClick={this.handleFieldClick}\r\n              onChange={this.handleChange}\r\n            />\r\n          </Col>\r\n          <Col xs='4' md='3' lg='2'>\r\n            <label className='no-wrap' htmlFor='singleTickets'>{strings.singleTickets}</label>\r\n            <input\r\n              min='0'\r\n              max='9999'\r\n              type='number'\r\n              className='input-sm form-control'\r\n              id='singleTickets'\r\n              name='singleTickets'\r\n              defaultValue={this.state.singleTickets}\r\n              onClick={this.handleFieldClick}\r\n              onChange={this.handleChange}\r\n            />\r\n          </Col>\r\n          <Col xs='4' md='3' lg='2'>\r\n            <label className='no-wrap' htmlFor='grandTickets'>{strings.grandTickets}</label>\r\n            <input\r\n              min='0'\r\n              max='999'\r\n              type='number'\r\n              className='input-sm form-control'\r\n              id='grandTickets'\r\n              name='grandTickets'\r\n              defaultValue={this.state.grandTickets}\r\n              onClick={this.handleFieldClick}\r\n              onChange={this.handleChange}\r\n            />\r\n          </Col>\r\n        </Row>\r\n        <Row className='pt-2'>\r\n          <Col xs='4' md='3' lg='2'>\r\n            <label className='no-wrap' htmlFor='totalRolls'>{strings.totalRolls}</label>\r\n            <input\r\n              disabled\r\n              type='text'\r\n              className='input-sm form-control'\r\n              id='totalRolls'\r\n              name='totalRolls'\r\n              defaultValue={this.state.totalRolls}\r\n              onClick={this.handleFieldClick}\r\n              onChange={this.handleChange}\r\n            />\r\n          </Col>\r\n          <Col xs='4' md='3' lg='2'>\r\n            <label className='no-wrap' htmlFor='percentage'>{strings.percentage}</label>\r\n            <input\r\n              disabled\r\n              type='text'\r\n              className='input-sm form-control'\r\n              id='percentage'\r\n              name='percentage'\r\n              defaultValue={this.state.percentage}\r\n              onClick={this.handleFieldClick}\r\n              onChange={this.handleChange}\r\n            />\r\n          </Col>\r\n        </Row>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default connect((state) => ({\r\n  crystals: state.crystals,\r\n  singleTickets: state.singleTickets,\r\n  grandTickets: state.grandTickets\r\n}))(SparkCalculator)\r\n","import React from 'react'\r\nimport { Alert, Col, OverlayTrigger, Row, Tooltip } from 'react-bootstrap'\r\nimport '../styles/ExperienceCalculator.scss'\r\nimport strings from '../helpers/localization'\r\nimport infoIcon from '../assets/info-filled.svg'\r\nimport { ExperienceTables, ExperienceTypes } from '../helpers/constants'\r\n\r\nclass ExperienceCalculator extends React.Component {\r\n  state = {\r\n    expType: ExperienceTypes.Weapon,\r\n    bonusExp: 10,\r\n    sameType: false,\r\n    totalExperience: 0,\r\n    archangelItems: 0,\r\n    vessels: 0,\r\n    levelTo: 40,\r\n    levelFrom: 1,\r\n    toNextLevel: 0,\r\n    showError: false,\r\n    maxLevel: ExperienceTables[ExperienceTypes.Weapon].length - 1,\r\n    experienceTable: ExperienceTables[ExperienceTypes.Weapon]\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.recalculateExperience()\r\n  }\r\n\r\n  recalculateExperience = () => {\r\n    const { levelFrom, levelTo } = this.state\r\n    const maxLevel = ExperienceTables[this.state.expType].length - 1\r\n\r\n    this.setState({\r\n      experienceTable: ExperienceTables[this.state.expType],\r\n      levelFrom: levelFrom > maxLevel ? maxLevel : levelFrom,\r\n      levelTo: levelTo > maxLevel ? maxLevel : levelTo,\r\n      maxLevel\r\n    }, () => {\r\n      const { bonusExp, experienceTable, expType, levelFrom, levelTo, sameType, toNextLevel } = this.state\r\n      const archangelExp = sameType ? 750 : 500\r\n      const vesselExp = 30000\r\n      let currentExperience = 0\r\n      let archangelItems = 0\r\n\r\n      const getRequiredItemsCount = (totalExperience, itemExperience) => {\r\n        return Math.ceil(totalExperience / (itemExperience + Math.floor(itemExperience * (bonusExp / 100))))\r\n      }\r\n\r\n      if (levelFrom > levelTo) {\r\n        this.setState({ showError: true })\r\n        return\r\n      }\r\n      this.setState({ showError: false })\r\n      if (toNextLevel > 0) {\r\n        currentExperience = (experienceTable[levelFrom + 1] - experienceTable[levelFrom]) - toNextLevel\r\n      }\r\n      const totalExperience = experienceTable[levelTo] - experienceTable[levelFrom] - currentExperience\r\n      if (expType !== ExperienceTypes.Rank) {\r\n        const vessels = getRequiredItemsCount(totalExperience, vesselExp)\r\n        archangelItems = getRequiredItemsCount(totalExperience, archangelExp)\r\n        this.setState({ vessels })\r\n      } else {\r\n        archangelItems = (experienceTable[levelFrom] / experienceTable[experienceTable.length - 1] * 100).toFixed(2)\r\n      }\r\n      this.setState({ archangelItems, totalExperience })\r\n    })\r\n  }\r\n\r\n  handleInputChange = (e) => {\r\n    this.setState({ [e.target.name]: parseInt(e.target.value) || '' }, () => {\r\n      this.recalculateExperience()\r\n    })\r\n  }\r\n\r\n  handleChange = (e) => {\r\n    this.setState({ [e.target.name]: e.target.value }, () => {\r\n      this.recalculateExperience()\r\n    })\r\n  }\r\n\r\n  handleCheckbox = (e) => {\r\n    this.setState({ [e.target.name]: e.target.checked }, () => {\r\n      this.recalculateExperience()\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <Row>\r\n          <Col xs='4' md='3' lg='2'>\r\n            <label className='no-wrap' htmlFor='levelFrom'>{strings.levelFrom}</label>\r\n            <input\r\n              min='0'\r\n              max={this.state.maxLevel}\r\n              type='number'\r\n              className='input-sm form-control'\r\n              id='levelFrom'\r\n              name='levelFrom'\r\n              value={this.state.levelFrom}\r\n              onChange={this.handleInputChange}\r\n            />\r\n          </Col>\r\n          <Col xs='4' md='3' lg='2'>\r\n            <label className='no-wrap' htmlFor='levelTo'>{strings.levelTo}</label>\r\n            <input\r\n              min='0'\r\n              max={this.state.maxLevel}\r\n              type='number'\r\n              className='input-sm form-control'\r\n              id='levelTo'\r\n              name='levelTo'\r\n              value={this.state.levelTo}\r\n              onChange={this.handleInputChange}\r\n            />\r\n          </Col>\r\n          <Col xs='4' md='3' lg='2'>\r\n            <label className='no-wrap' htmlFor='toNextLevel'>{strings.toNextLevel}</label>\r\n            <input\r\n              min='0'\r\n              step='100'\r\n              type='number'\r\n              className='input-sm form-control'\r\n              id='toNextLevel'\r\n              name='toNextLevel'\r\n              value={this.state.toNextLevel}\r\n              onChange={this.handleInputChange}\r\n            />\r\n          </Col>\r\n          <Col\r\n            xs='4' md='3' lg='2' className='will-hide tooltip-col'\r\n            hidden={this.state.expType === ExperienceTypes.Rank}\r\n          >\r\n            <OverlayTrigger overlay={<Tooltip id='bonus-info-tooltip'>{strings.bonusExpInfo}</Tooltip>}>\r\n              <label className='no-wrap' htmlFor='bonusExp'>\r\n                <img src={infoIcon} alt='info icon' width='16' /> {strings.bonusExp}\r\n              </label>\r\n            </OverlayTrigger>\r\n            <input\r\n              min='0'\r\n              type='number'\r\n              className='input-sm form-control'\r\n              id='bonusExp'\r\n              name='bonusExp'\r\n              value={this.state.bonusExp}\r\n              onChange={this.handleInputChange}\r\n            />\r\n          </Col>\r\n        </Row>\r\n        <Row className='mt-3'>\r\n          <div className='radio-tile-group'>\r\n            <div className='input-container'>\r\n              <input\r\n                id='weaponExperience'\r\n                type='radio'\r\n                name='expType'\r\n                className='radio-button'\r\n                value={ExperienceTypes.Weapon}\r\n                checked={this.state.expType === ExperienceTypes.Weapon}\r\n                onChange={this.handleChange}\r\n              />\r\n              <div className='radio-tile'>\r\n                <label\r\n                  htmlFor='weaponExperience'\r\n                  className='radio-tile-label'\r\n                >\r\n                  {strings.weaponSummon}\r\n                </label>\r\n              </div>\r\n            </div>\r\n            <div className='input-container'>\r\n              <input\r\n                id='characterExperience'\r\n                type='radio'\r\n                name='expType'\r\n                className='radio-button'\r\n                value={ExperienceTypes.Character}\r\n                checked={this.state.expType === ExperienceTypes.Character}\r\n                onChange={this.handleChange}\r\n              />\r\n              <div className='radio-tile'>\r\n                <label\r\n                  htmlFor='characterExperience'\r\n                  className='radio-tile-label'\r\n                >\r\n                  {strings.character}\r\n                </label>\r\n              </div>\r\n            </div>\r\n            <div className='input-container'>\r\n              <input\r\n                id='rankExperience'\r\n                type='radio'\r\n                name='expType'\r\n                className='radio-button'\r\n                value={ExperienceTypes.Rank}\r\n                checked={this.state.expType === ExperienceTypes.Rank}\r\n                onChange={this.handleChange}\r\n              />\r\n              <div className='radio-tile'>\r\n                <label\r\n                  htmlFor='rankExperience'\r\n                  className='radio-tile-label'\r\n                >\r\n                  {strings.rank}\r\n                </label>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <Col\r\n            md='2'\r\n            className='align-items-center checkbox-col will-hide'\r\n            hidden={this.state.expType === ExperienceTypes.Rank}\r\n          >\r\n            <label htmlFor='sameType' className='m-0 pr-2 no-wrap'>{strings.sameType}</label>\r\n            <input\r\n              type='checkbox'\r\n              id='sameType'\r\n              name='sameType'\r\n              className='checkbox-input'\r\n              checked={this.state.sameType}\r\n              onChange={this.handleCheckbox}\r\n            />\r\n            <label htmlFor='sameType' className='checkbox-label mb-0'>\r\n              <span className='checkbox' />\r\n            </label>\r\n          </Col>\r\n        </Row>\r\n        <Row className='mt-3'>\r\n          <Col xs='4' md='3' lg='2'>\r\n            <label className='no-wrap' htmlFor='totalExperience'>{strings.totalExperience}</label>\r\n            <input\r\n              disabled\r\n              type='number'\r\n              id='totalExperience'\r\n              name='totalExperience'\r\n              className='input-sm form-control'\r\n              value={this.state.totalExperience}\r\n              onChange={this.handleChange}\r\n            />\r\n          </Col>\r\n          <Col xs='4' md='3' lg='2'>\r\n            <label className='no-wrap' htmlFor='archangelItems'>\r\n              {this.state.expType !== ExperienceTypes.Rank ? strings.archangelItems : strings.rpPercentage}\r\n            </label>\r\n            <input\r\n              disabled\r\n              type='number'\r\n              id='archangelItems'\r\n              name='archangelItems'\r\n              className='input-sm form-control'\r\n              value={this.state.archangelItems}\r\n              onChange={this.handleChange}\r\n            />\r\n          </Col>\r\n          <Col xs='4' md='3' lg='2' className='will-hide' hidden={this.state.expType === ExperienceTypes.Rank}>\r\n            <label className='no-wrap' htmlFor='vessels'>{strings.vessels}</label>\r\n            <input\r\n              disabled\r\n              type='number'\r\n              id='vessels'\r\n              name='vessels'\r\n              value={this.state.vessels}\r\n              className='input-sm form-control'\r\n              onChange={this.handleChange}\r\n            />\r\n          </Col>\r\n        </Row>\r\n        <Alert variant='danger' className='mb-0 mt-3' show={this.state.showError}>\r\n          <strong className='align-middle'>{strings.error}: </strong>\r\n          <span className='align-middle'>{strings.cantDowngrade}</span>\r\n        </Alert>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default ExperienceCalculator\r\n","import React from 'react'\r\nimport ReactGA from 'react-ga'\r\nimport { Tab, Tabs } from 'react-bootstrap'\r\nimport GithubCorner from 'react-github-corner'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport './styles/App.scss'\r\nimport { SET_LANGUAGE } from './actions'\r\nimport Settings from './components/Settings'\r\nimport strings from './helpers/localization'\r\nimport { Japanese } from './helpers/constants'\r\nimport SparkCalculator from './components/SparkCalculator'\r\nimport ExperienceCalculator from './components/ExperienceCalculator'\r\n\r\nconst App = () => {\r\n  const dispatch = useDispatch()\r\n  const languageCode = useSelector(state => state.languageCode)\r\n\r\n  if (languageCode === Japanese) {\r\n    dispatch({ type: SET_LANGUAGE, payload: Japanese })\r\n  }\r\n\r\n  const handleTabSelect = (tabKey) => {\r\n    ReactGA.modalview(tabKey)\r\n  }\r\n\r\n  return (\r\n    <div className='container mt-md-3'>\r\n      <Tabs id='menu-tabs' defaultActiveKey='spark' onSelect={handleTabSelect}>\r\n        <Tab eventKey='spark' title={strings.SparkCalc}>\r\n          <SparkCalculator language={languageCode} />\r\n        </Tab>\r\n        <Tab eventKey='exp' title={strings.ExpRpCalc}>\r\n          <ExperienceCalculator language={languageCode} />\r\n        </Tab>\r\n        <Tab eventKey='settings' title='Settings/設定'>\r\n          <Settings />\r\n        </Tab>\r\n      </Tabs>\r\n      <GithubCorner\r\n        href='https://github.com/eurea/eurea.github.io'\r\n        bannerColor='#0288D1'\r\n        target='_blank'\r\n        rel='noreferrer'\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import { SET_SPARK_DATA, SET_LANGUAGE } from '../actions'\r\nimport strings from '../helpers/localization'\r\n\r\nexport default function (state = {}, action) {\r\n  switch (action.type) {\r\n    case SET_SPARK_DATA: {\r\n      return {\r\n        ...state,\r\n        ...action.payload\r\n      }\r\n    }\r\n    case SET_LANGUAGE: {\r\n      strings.setLanguage(action.payload)\r\n      return {\r\n        ...state,\r\n        languageCode: action.payload\r\n      }\r\n    }\r\n    default: {\r\n      return state\r\n    }\r\n  }\r\n}\r\n"],"sourceRoot":""}